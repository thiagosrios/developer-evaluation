using Ambev.DeveloperEvaluation.Common.Validation;
using Ambev.DeveloperEvaluation.Domain.Common;
using Ambev.DeveloperEvaluation.Domain.Enums;
using Ambev.DeveloperEvaluation.Domain.Validation;

namespace Ambev.DeveloperEvaluation.Domain.Entities
{
    /// <summary>
    /// Represents a sale generated by a customer order, with a list of items and a status
    /// that indicates if it's approved or canceled
    /// </summary>
    public class Sale : BaseEntity
    {
        /// <summary>
        /// Gets the number of the sale (it's not the base ID inherited from BaseEntity)
        /// </summary>
        public int Number { get; set; }

        /// <summary>
        /// Gets the id of the branch where the sale are created
        /// </summary>
        public Guid BranchId { get; set; }

        /// <summary>
        /// Gets the id from the customer who created the sale.
        /// </summary>
        public Guid CustomerId { get; set; }

        /// <summary>
        /// Gets the list of the items on the sales 
        /// </summary>
        public List<SaleItem> Items { get; set; } = new();

        /// <summary>
        /// Gets status of the sale
        /// </summary>
        public SaleStatus Status { get; set; }

        /// <summary>
        /// Gets the date and time when the sale was created.
        /// </summary>
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Gets the date and time when the sale was updated.
        /// </summary>
        public DateTime UpdatedAt { get; set; }

        /// <summary>
        /// Gets the total value of the sale (sum of its products).
        /// </summary>
        public decimal TotalSaleAmount() => Items.Count > 0 ? Items.Sum(x => x.TotalAmount) : 0;

        public Sale() { }

        public Sale(Guid branchId, Guid customerId, List<SaleItem> items)
        {
            BranchId = branchId;
            CustomerId = customerId;
            Items = items;
            CreatedAt = DateTime.Now;
            UpdatedAt = DateTime.Now;
            Status = SaleStatus.Pending;
        }

        /// <summary>
        /// Performs validation of the sale entity using the SaleValidator rules.
        /// </summary>
        public ValidationResultDetail Validate()
        {
            var validator = new SaleValidator();
            var result = validator.Validate(this);
            return new ValidationResultDetail
            {
                IsValid = result.IsValid,
                Errors = result.Errors.Select(o => (ValidationErrorDetail)o)
            };
        }

        /// <summary>
        /// Generate the next number for the sale based on the current number on the system
        /// </summary>
        /// <param name="currentNumber"></param>
        public void GenerateSaleNumber(int currentNumber)
        {
            if (currentNumber == 0)
                Number = 1;

            Number = currentNumber + 1;
        }

        /// <summary>
        /// Cancel the Sale changing its Status
        /// </summary>
        public void Cancel()
        {
            Status = SaleStatus.Canceled;
            UpdatedAt = DateTime.Now;
        }
    }
}
